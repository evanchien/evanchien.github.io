<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-02-16T15:20:19-06:00</updated><id>http://localhost:4000/</id><title type="html">Evan’s Personal page</title><subtitle>Powered by Jekyll and GitHub Pages</subtitle><author><name>Paul Le</name></author><entry><title type="html">Loss Functions in YOLOv3</title><link href="http://localhost:4000/Loss-Functions.html" rel="alternate" type="text/html" title="Loss Functions in YOLOv3" /><published>2021-02-16T00:00:00-06:00</published><updated>2021-02-16T00:00:00-06:00</updated><id>http://localhost:4000/Loss-Functions</id><content type="html" xml:base="http://localhost:4000/Loss-Functions.html">&lt;h3 id=&quot;bounding-boxes&quot;&gt;Bounding Boxes&lt;/h3&gt;

&lt;p&gt;For bounding boxes, the loss is MSE of&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Delta in center coordinates&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Delta in width and height&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!-- $b_x = \sigma(t_x) + c_x$ --&gt;
&lt;p&gt;&lt;img style=&quot;transform: translateY(0.1em); background: white;&quot; src=&quot;https://render.githubusercontent.com/render/math?math=b_x%20%3D%20%5Csigma(t_x)%20%2B%20c_x&quot; /&gt;&lt;br /&gt;
&lt;!-- $b_y = \sigma(t_y) = c_y$ --&gt; &lt;img style=&quot;transform: translateY(0.1em); background: white;&quot; src=&quot;https://render.githubusercontent.com/render/math?math=b_y%20%3D%20%5Csigma(t_y)%20%3D%20c_y&quot; /&gt;&lt;br /&gt;
&lt;!-- $b_w = p_we^{t_w}$ --&gt; &lt;img style=&quot;transform: translateY(0.1em); background: white;&quot; src=&quot;https://render.githubusercontent.com/render/math?math=b_w%20%3D%20p_we%5E%7Bt_w%7D&quot; /&gt;
&lt;!-- $b_h = p_he^{t_h}$ --&gt; &lt;img style=&quot;transform: translateY(0.1em); background: white;&quot; src=&quot;https://render.githubusercontent.com/render/math?math=b_h%20%3D%20p_he%5E%7Bt_h%7D&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;classification&quot;&gt;Classification&lt;/h3&gt;

&lt;p&gt;In YOLOv3, the loss for classification is Binary Cross-Entropy loss rather than the general Softmax CE. Softmax links the confidence of each class together while Binary CE keeps them independent. We can treat a binary CE as a 2-class CE.&lt;/p&gt;

&lt;!-- $CE = -t\log( f ( s ) )$ - ( 1 - t ) $\log( 1 - f ( s ) )$ --&gt;
&lt;p&gt;&lt;img style=&quot;transform: translateY(0.1em); background: white;&quot; src=&quot;https://render.githubusercontent.com/render/math?math=CE%20%3D%20-t%5Clog(%20f%20(%20s%20)%20)%24%20-%20(%201%20-%20t%20)%20%24%5Clog(%201%20-%20f%20(%20s%20)%20)&quot; /&gt; , where s and 1 - f ( s ) are the score for positive and negative, t and (1-t) are the ground truth.&lt;/p&gt;

&lt;p&gt;Applying this to each class, the combined loss for class &lt;!-- $C_i$ --&gt; &lt;img style=&quot;transform: translateY(0.1em); background: white;&quot; src=&quot;https://render.githubusercontent.com/render/math?math=C_i&quot; /&gt; is as:&lt;/p&gt;

&lt;!-- $CE=\begin{matrix} - \log(f(s_i))\\-\log(1-f(s_i))&amp;  \end{matrix}$ --&gt;
&lt;p&gt;&lt;img style=&quot;transform: translateY(0.1em); background: white;&quot; src=&quot;https://render.githubusercontent.com/render/math?math=CE%3D%5Cbegin%7Bmatrix%7D%20-%20%5Clog(f(s_i))%5C%5C-%5Clog(1-f(s_i))%26%20%20%5Cend%7Bmatrix%7D&quot; /&gt; &lt;!-- $\begin{matrix} ,t_i = 1(object)\\,t_i = 0(background)\end{matrix} , where f(s_i)=\frac{1}{1 + e^{-s_i}}$ --&gt; &lt;img style=&quot;transform: translateY(0.1em); background: white;&quot; src=&quot;https://render.githubusercontent.com/render/math?math=%5Cbegin%7Bmatrix%7D%20%2Ct_i%20%3D%201(object)%5C%5C%2Ct_i%20%3D%200(background)%5Cend%7Bmatrix%7D%20%2C%20where%20f(s_i)%3D%5Cfrac%7B1%7D%7B1%20%2B%20e%5E%7B-s_i%7D%7D&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The gradient respect to the score &lt;!-- $s_i = S_1$ --&gt; &lt;img style=&quot;transform: translateY(0.1em); background: white;&quot; src=&quot;https://render.githubusercontent.com/render/math?math=s_i%20%3D%20S_1&quot; /&gt; can be written as:&lt;/p&gt;

&lt;!-- $\frac{\partial }{\partial S_i}(CE ( f ( s_i ) ) ) = t_1 ( f ( s_1 ) -1) + (1 - t_1) f ( s_1 )$ --&gt;
&lt;p&gt;&lt;img style=&quot;transform: translateY(0.1em); background: white;&quot; src=&quot;https://render.githubusercontent.com/render/math?math=%5Cfrac%7B%5Cpartial%20%7D%7B%5Cpartial%20S_i%7D(CE%20(%20f%20(%20s_i%20)%20)%20)%20%3D%20t_1%20(%20f%20(%20s_1%20)%20-1)%20%2B%20(1%20-%20t_1)%20f%20(%20s_1%20)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;!-- $\frac{\partial }{\partial S_i}(CE ( f ( s_i ) ) ) = \begin{matrix} f ( s_i)-1 \\f ( s_i)&amp;  \end{matrix}$ --&gt;
&lt;p&gt;&lt;img style=&quot;transform: translateY(0.1em); background: white;&quot; src=&quot;https://render.githubusercontent.com/render/math?math=%5Cfrac%7B%5Cpartial%20%7D%7B%5Cpartial%20S_i%7D(CE%20(%20f%20(%20s_i%20)%20)%20)%20%3D%20%5Cbegin%7Bmatrix%7D%20f%20(%20s_i)-1%20%5C%5Cf%20(%20s_i)%26%20%20%5Cend%7Bmatrix%7D&quot; /&gt; &lt;!-- $\begin{matrix} if&amp;t_i = 1\\if &amp;t_i = 0\end{matrix}$ --&gt; &lt;img style=&quot;transform: translateY(0.1em); background: white;&quot; src=&quot;https://render.githubusercontent.com/render/math?math=%5Cbegin%7Bmatrix%7D%20if%26t_i%20%3D%201%5C%5Cif%20%26t_i%20%3D%200%5Cend%7Bmatrix%7D&quot; /&gt;,&lt;br /&gt;
&lt;!-- $f( s_i )$ --&gt; &lt;img style=&quot;transform: translateY(0.1em); background: white;&quot; src=&quot;https://render.githubusercontent.com/render/math?math=f(%20s_i%20)&quot; /&gt; is the sigmoid function , &lt;!-- $f = \frac{1}{1+e^{-x}}$ --&gt; &lt;img style=&quot;transform: translateY(0.1em); background: white;&quot; src=&quot;https://render.githubusercontent.com/render/math?math=f%20%3D%20%5Cfrac%7B1%7D%7B1%2Be%5E%7B-x%7D%7D&quot; /&gt;  ,&lt;!-- $\frac {df}{dx} = \frac{e^{-x}}{(1+e^{-x})^2} = f ( 1- f )$ --&gt; &lt;img style=&quot;transform: translateY(0.1em); background: white;&quot; src=&quot;https://render.githubusercontent.com/render/math?math=%5Cfrac%20%7Bdf%7D%7Bdx%7D%20%3D%20%5Cfrac%7Be%5E%7B-x%7D%7D%7B(1%2Be%5E%7B-x%7D)%5E2%7D%20%3D%20f%20(%201-%20f%20)&quot; /&gt;&lt;/p&gt;</content><author><name>Paul Le</name></author><summary type="html">Bounding Boxes</summary></entry><entry><title type="html">Move linux system from one SSD to another</title><link href="http://localhost:4000/Move-linux.html" rel="alternate" type="text/html" title="Move linux system from one SSD to another" /><published>2020-12-04T00:00:00-06:00</published><updated>2020-12-04T00:00:00-06:00</updated><id>http://localhost:4000/Move-linux</id><content type="html" xml:base="http://localhost:4000/Move-linux.html">&lt;h3 id=&quot;what-we-need-to-transfer-the-system&quot;&gt;What We Need To Transfer The System&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Ubuntu Live CD/USB&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A new HD/SSD at lease equal to the size of the original HD/SSD&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;copy-the-partitions&quot;&gt;Copy The Partitions&lt;/h3&gt;

&lt;p&gt;Plug in the USB/CD and the new SSD. Boot the system, adjust the BIOS setting and move the the live USB up to the top. After restart, select “Try Ubuntu”. After login, open one terminal window and use lsblk to locate the current system.&lt;/p&gt;

&lt;p&gt;Now, open gparted in the applications list or type sudo gparted in the terminal window. Assuming the new SSD is empty, we can now copy the partitions on the old SSD/HD to new SSD/HD by:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Select the old SSD/HD from the drop down menu on the right.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Right the partitions you want to copy and select copy from the menu.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select the new SSD/HD from the drop down menu on the right. Right click the unallocated partition in the bar and select paste.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Repeat this process until all the partition you want are copied. (It can take fairly long depending on how big those partitions are)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For me, I have boot/efi and /recovery partitions on the original SSD to support my dual boot windows. So I also copy them to the new drive. I have a cryped swap partition on the old drive and I copy that one too.&lt;/p&gt;

&lt;h3 id=&quot;uuid-modification&quot;&gt;UUID Modification&lt;/h3&gt;

&lt;p&gt;Next thing to do is to modify the UUID listed on the /etc/fstab. Since the UUID of the system partition on the new drive is diffrent from the original, we need to rectify this so we can load the system from the new SSD/HD.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Type in blkid in terminal. A list of partitions and their UUIDs will show in the screen. This can also be done by right click the partiton in gparted.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open the /etc/fstab, there is a partition mounted to /. Modify its UUID so it is the UUID of the new partition. Save the change and reboot. You should be able to login to the system on the new drive.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;issues-i-saw&quot;&gt;Issues I Saw&lt;/h3&gt;

&lt;p&gt;I have a crypted swap partition on the old drive and I did copy that one over to the new drive. Every time before I log-in the ubuntu, I have to type in the password. This bothers me a lot. So, I remove that swap partition and re-create one. Here are few steps I made after creating the new swap partition.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;sudo mkswap /dev/the_swap_partition&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A new UUID shows on the screen&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Update the swap partition in the fstab&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reboot. The swap should be automatically mounted. No more password typing for the swap partition.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Paul Le</name></author><summary type="html">What We Need To Transfer The System</summary></entry><entry><title type="html">ROC and AUC for classification</title><link href="http://localhost:4000/ROC-AUC.html" rel="alternate" type="text/html" title="ROC and AUC for classification" /><published>2020-11-11T00:00:00-06:00</published><updated>2020-11-11T00:00:00-06:00</updated><id>http://localhost:4000/ROC-AUC</id><content type="html" xml:base="http://localhost:4000/ROC-AUC.html">&lt;h3 id=&quot;roc&quot;&gt;ROC&lt;/h3&gt;

&lt;p&gt;Receiver Operating Charasteristic Curve&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;X - False Positive Ratio (range from 0 to 1)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;FP/(FP+TN)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Y - True Positive Ratio (range from 0 to 1)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;TP/(TP+FN)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Sorting the samples from highest confidence score to lowest.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Using the confidence score as the threshold. Samples with score higher than the threshold are positive. Otherwise, negative.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Connecting the dots we get ROC. The more samples, the smoother the curve.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(0,0) is where we set the threshold at 1.0 and (1,1) is threshold at 0.0.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;auc&quot;&gt;AUC&lt;/h3&gt;

&lt;p&gt;Area Under the Curve&lt;/p&gt;

&lt;p&gt;The (ROC-)AUC value is equivalent to the probability that a randomly chosen positive example is ranked higher than a randomly chosen negative example.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;AUC = 1: Perfect classifier. There is a threshold perfectly classifies all the samples.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AUC = 0.5: Just like flipping a coin.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AUO &amp;lt; 0.5: Worse than flipping a coin. Inverse classification gives better results.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PR-AUC&lt;/p&gt;

&lt;h3 id=&quot;f1&quot;&gt;F1&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://render.githubusercontent.com/render/math?math=F1 = 2 \frac{precision*recall}{precision%2Brecall}&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Micro-F1: Sum up all the TP, FP, TN, FN across multi-class and fo F1.&lt;/p&gt;

&lt;p&gt;Macro-F1: Sum up TP, FP, TN, FN per class for F1 then do averaging over all the F1s.&lt;/p&gt;</content><author><name>Paul Le</name></author><summary type="html">ROC</summary></entry></feed>